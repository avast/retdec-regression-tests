from regression_tests import *
from regression_tests.utils.os import on_windows

class TestCryptoLocker(Test):
    settings = TestSettings(
        input='0648a8d54b315eb2d3deb32b4a69909a',
        args='-k'
    )

    def test_check_for_currently_detected_strings(self):
        assert self.out_c.has_string_literal( '.bat' )
        assert self.out_c.has_string_literal( '.exe' )
        assert self.out_c.has_string_literal( '.tmp.tmp' )
        assert self.out_c.has_string_literal( '@echo off\\r\\n:Repeat\\r\\nattrib -R -S -H \\"%s\\"\\r\\ndel /F \\"%s\\" >nul\\r\\nif exist \\"%s\\" goto Repeat\\r\\ndel /F \\"%s\\"' )
        assert self.out_c.has_string_literal( 'bid' )
        assert self.out_c.has_string_literal( 'Global\\\\' )
        assert self.out_c.has_string_literal( 'Local\\\\' )
        assert self.out_c.has_string_literal( 'Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)' )
        #assert self.out_c.has_string_literal( 'name' )
        assert self.out_c.has_string_literal( 'pid' )
        assert self.out_c.has_string_literal( 'PrivateKey' )
        assert self.out_c.has_string_literal( 'PublicKey' )
        assert self.out_c.has_string_literal( 'Software\\\\CryptoLocker' )
        assert self.out_c.has_string_literal( 'Software\\\\CryptoLocker\\\\Files' )
        assert self.out_c.has_string_literal( 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run' )
        assert self.out_c.has_string_literal( '%ProgramW6432%' )
        assert self.out_c.has_string_literal( '-1' )
        assert self.out_c.has_string_literal( 'Button' )
        assert self.out_c.has_string_literal( 'Connection: Close\\r\\n' )
        assert self.out_c.has_string_literal( 'ComSpec' )
        assert self.out_c.has_string_literal( 'CryptoLocker' )
        assert self.out_c.has_string_literal( 'Explorer' )
        assert self.out_c.has_string_literal( 'GetFileInformationByHandleEx' )
        #assert self.out_c.has_string_literal( 'GetUserPreferredUILanguages' )
        assert self.out_c.has_string_literal( 'HTTP/1.1' )
        assert self.out_c.has_string_literal( "I'll be back!" )
        assert self.out_c.has_string_literal( 'Microsoft Enhanced Cryptographic Provider v1.0' )
        assert self.out_c.has_string_literal( 'Microsoft Enhanced RSA and AES Cryptographic Provider' )
        assert self.out_c.has_string_literal( 'Msftedit.dll' )
        assert self.out_c.has_string_literal( 'ObtainUserAgentString' )
        #assert self.out_c.has_string_literal( 'RegDeleteKeyExW' )
        assert self.out_c.has_string_literal( 'SHGetKnownFolderPath' )
        assert self.out_c.has_string_literal( 'SetFileInformationByHandle' )
        assert self.out_c.has_string_literal( 'VersionInfo' )
        assert self.out_c.has_string_literal( 'advapi32.dll' )
        assert self.out_c.has_string_literal( 'bitcoin:' )
        assert self.out_c.has_string_literal( 'kernel32.dll' )
        assert self.out_c.has_string_literal( 'shell32.dll' )
        assert self.out_c.has_string_literal( 'urlmon.dll' )
        assert self.out_c.has_string_literal( 'version=%u&id=%u' )
        assert self.out_c.has_string_literal( 'viewfiles' )

    def test_check_for_currently_detected_functions(self):
        assert self.out_c.has_func( 'function_401000' )
        assert self.out_c.has_func( 'function_401080' )
        assert self.out_c.has_func( 'function_4010c0' )
        assert self.out_c.has_func( 'function_401200' )
        assert self.out_c.has_func( 'function_4012b0' )
        assert self.out_c.has_func( 'function_4013e0' )
        assert self.out_c.has_func( 'function_401610' )
        assert self.out_c.has_func( 'function_4017e0' )
        assert self.out_c.has_func( 'function_401850' )
        assert self.out_c.has_func( 'function_4018a0' )
        assert self.out_c.has_func( 'function_401910' )
        assert self.out_c.has_func( 'function_401990' )
        assert self.out_c.has_func( 'function_401d60' )
        assert self.out_c.has_func( 'entry_point' )
        assert self.out_c.has_func( 'function_401e10' )
        assert self.out_c.has_func( 'function_401e70' )
        assert self.out_c.has_func( 'function_401ec0' )
        assert self.out_c.has_func( 'function_401ee0' )
        assert self.out_c.has_func( 'function_401f20' )
        assert self.out_c.has_func( 'function_401f90' )
        assert self.out_c.has_func( 'function_402030' )
        assert self.out_c.has_func( 'function_402060' )
        assert self.out_c.has_func( 'function_4020c0' )
        assert self.out_c.has_func( 'function_4020e0' )
        assert self.out_c.has_func( 'function_402150' )
        assert self.out_c.has_func( 'function_4021f0' )
        assert self.out_c.has_func( 'function_402360' )
        assert self.out_c.has_func( 'function_402370' )
        assert self.out_c.has_func( 'function_402380' )
        assert self.out_c.has_func( 'function_402480' )
        assert self.out_c.has_func( 'function_402680' )
        assert self.out_c.has_func( 'function_4028d0' )
        assert self.out_c.has_func( 'function_402b20' )
        assert self.out_c.has_func( 'function_402be0' )
        assert self.out_c.has_func( 'function_402ca0' )
        assert self.out_c.has_func( 'function_402e20' )
        assert self.out_c.has_func( 'function_402e90' )
        assert self.out_c.has_func( 'function_402ea0' )
        assert self.out_c.has_func( 'function_402f90' )
        assert self.out_c.has_func( 'function_403010' )
        assert self.out_c.has_func( 'function_403070' )
        assert self.out_c.has_func( 'function_4033b0' )
        assert self.out_c.has_func( 'function_403b60' )
        assert self.out_c.has_func( 'function_403bf0' )
        assert self.out_c.has_func( 'function_403c80' )
        assert self.out_c.has_func( 'function_403d70' )
        assert self.out_c.has_func( 'function_403eb0' )
        assert self.out_c.has_func( 'function_404040' )
        assert self.out_c.has_func( 'function_4042e0' )
        assert self.out_c.has_func( 'function_404370' )
        assert self.out_c.has_func( 'function_404420' )
        assert self.out_c.has_func( 'function_404620' )
        assert self.out_c.has_func( 'function_404690' )
        assert self.out_c.has_func( 'function_4046c0' )
        assert self.out_c.has_func( 'function_404720' )
        assert self.out_c.has_func( 'function_4047c0' )
        assert self.out_c.has_func( 'function_4048a0' )
        assert self.out_c.has_func( 'function_4048f0' )
        assert self.out_c.has_func( 'function_404960' )
        assert self.out_c.has_func( 'function_404a50' )
        assert self.out_c.has_func( 'function_404ac0' )
        assert self.out_c.has_func( 'function_404ba0' )
        assert self.out_c.has_func( 'function_404c90' )
        assert self.out_c.has_func( 'function_404d10' )
        assert self.out_c.has_func( 'function_404d60' )
        assert self.out_c.has_func( 'function_404e00' )
        assert self.out_c.has_func( 'function_404e50' )
        assert self.out_c.has_func( 'function_404ef0' )
        assert self.out_c.has_func( 'function_404f60' )
        assert self.out_c.has_func( 'function_404fa0' )
        assert self.out_c.has_func( 'function_4050b0' )
        assert self.out_c.has_func( 'function_4050c0' )
        assert self.out_c.has_func( 'function_405250' )
        assert self.out_c.has_func( 'function_405290' )
        assert self.out_c.has_func( 'function_405310' )
        assert self.out_c.has_func( 'function_405390' )
        assert self.out_c.has_func( 'function_405460' )
        assert self.out_c.has_func( 'function_405550' )
        assert self.out_c.has_func( 'function_405570' )
        assert self.out_c.has_func( 'function_405750' )
        assert self.out_c.has_func( 'function_405830' )
        assert self.out_c.has_func( 'function_405880' )
        assert self.out_c.has_func( 'function_405a70' )
        assert self.out_c.has_func( 'function_405bd0' )
        assert self.out_c.has_func( 'function_405c40' )
        assert self.out_c.has_func( 'function_405c70' )
        assert self.out_c.has_func( 'function_405cc0' )
        assert self.out_c.has_func( 'function_405dc0' )
        assert self.out_c.has_func( 'function_406010' )
        assert self.out_c.has_func( 'function_406250' )
        assert self.out_c.has_func( 'function_4062f0' )
        assert self.out_c.has_func( 'function_406480' )
        assert self.out_c.has_func( 'function_4064d0' )
        assert self.out_c.has_func( 'function_4064f0' )
        assert self.out_c.has_func( 'function_406500' )
        assert self.out_c.has_func( 'function_4065b0' )
        assert self.out_c.has_func( 'function_406610' )
        assert self.out_c.has_func( 'function_406720' )
        assert self.out_c.has_func( 'function_4067d4' )
        assert self.out_c.has_func( 'function_406b90' )
        assert self.out_c.has_func( 'function_406bd0' )
        assert self.out_c.has_func( 'function_406cb0' )
        assert self.out_c.has_func( 'function_406cd0' )
        assert self.out_c.has_func( 'function_406cf0' )
        assert self.out_c.has_func( 'function_406ec0' )
        assert self.out_c.has_func( 'function_406ee0' )
        assert self.out_c.has_func( 'function_406f90' )
        assert self.out_c.has_func( 'function_407140' )
        assert self.out_c.has_func( 'function_407270' )
        assert self.out_c.has_func( 'function_407300' )
        assert self.out_c.has_func( 'function_407372' )
        assert self.out_c.has_func( 'function_407390' )
        assert self.out_c.has_func( 'function_4073e0' )
        assert self.out_c.has_func( 'function_407470' )
        assert self.out_c.has_func( 'function_407730' )
        assert self.out_c.has_func( 'function_4078f0' )
        assert self.out_c.has_func( 'function_407c00' )
        assert self.out_c.has_func( 'function_407fc0' )
        assert self.out_c.has_func( 'function_408010' )
        assert self.out_c.has_func( 'function_4080d0' )
        assert self.out_c.has_func( 'function_4080f0' )
        assert self.out_c.has_func( 'function_408160' )
        assert self.out_c.has_func( 'function_408250' )
        assert self.out_c.has_func( 'function_4082e0' )
        assert self.out_c.has_func( 'function_408340' )
        assert self.out_c.has_func( 'function_408410' )
        assert self.out_c.has_func( 'function_408640' )
        assert self.out_c.has_func( 'function_408690' )
        assert self.out_c.has_func( 'function_408760' )
        assert self.out_c.has_func( 'function_4087f0' )
        assert self.out_c.has_func( 'function_408900' )
        assert self.out_c.has_func( 'function_408980' )
        assert self.out_c.has_func( 'function_408a70' )
        assert self.out_c.has_func( 'function_408ae0' )
        assert self.out_c.has_func( 'function_408bc0' )
        assert self.out_c.has_func( 'function_408c80' )
        assert self.out_c.has_func( 'function_408d30' )
        assert self.out_c.has_func( 'function_408e10' )
        assert self.out_c.has_func( 'function_408f10' )
        assert self.out_c.has_func( 'function_408fc0' )
        assert self.out_c.has_func( 'function_409010' )
        assert self.out_c.has_func( 'function_4090c0' )
        assert self.out_c.has_func( 'function_409140' )
        assert self.out_c.has_func( 'function_4092a0' )
        assert self.out_c.has_func( 'function_409340' )
        assert self.out_c.has_func( 'function_4093a0' )
        assert self.out_c.has_func( 'function_409530' )
        assert self.out_c.has_func( 'function_409540' )
        assert self.out_c.has_func( 'function_4095d0' )
        assert self.out_c.has_func( 'function_409650' )
        assert self.out_c.has_func( 'function_409690' )
        assert self.out_c.has_func( 'function_4096f0' )
        assert self.out_c.has_func( 'function_409750' )
        assert self.out_c.has_func( 'function_409780' )
        assert self.out_c.has_func( 'function_4097e0' )
        assert self.out_c.has_func( 'function_409850' )
        assert self.out_c.has_func( 'function_4099a0' )
        assert self.out_c.has_func( 'function_409a70' )
        assert self.out_c.has_func( 'function_409b50' )
        assert self.out_c.has_func( 'function_409b60' )
        assert self.out_c.has_func( 'function_409c60' )
        assert self.out_c.has_func( 'function_409da0' )
        assert self.out_c.has_func( 'function_40a070' )
        assert self.out_c.has_func( 'function_40a370' )
        assert self.out_c.has_func( 'function_40a5f0' )
        assert self.out_c.has_func( 'function_40a650' )
        assert self.out_c.has_func( 'function_40a660' )
        assert self.out_c.has_func( 'function_40a760' )
        assert self.out_c.has_func( 'function_40abf0' )
        assert self.out_c.has_func( 'function_40ac70' )
        assert self.out_c.has_func( 'function_40acb0' )
        assert self.out_c.has_func( 'function_40ad2b' )
        assert self.out_c.has_func( 'function_40ad40' )
        assert self.out_c.has_func( 'function_40ada0' )
        assert self.out_c.has_func( 'function_40af20' )
        assert self.out_c.has_func( 'function_40b020' )
        assert self.out_c.has_func( 'function_40b0a0' )
        assert self.out_c.has_func( 'function_40b150' )
        assert self.out_c.has_func( 'function_40b1c0' )
        assert self.out_c.has_func( 'function_40b250' )
        assert self.out_c.has_func( 'function_40b2b4' )
        assert self.out_c.has_func( 'function_40b2d0' )
        assert self.out_c.has_func( 'function_40b3e0' )
        assert self.out_c.has_func( 'function_40b420' )
        assert self.out_c.has_func( 'function_40b5a0' )
        assert self.out_c.has_func( 'function_40b670' )
        assert self.out_c.has_func( 'function_40ba10' )
        assert self.out_c.has_func( 'function_40ba90' )
        assert self.out_c.has_func( 'function_40bb20' )
        assert self.out_c.has_func( 'function_40bbf0' )
        assert self.out_c.has_func( 'function_40bc40' )
        assert self.out_c.has_func( 'function_40bcc0' )
        assert self.out_c.has_func( 'function_40bcf0' )
        assert self.out_c.has_func( 'function_40bd60' )
        assert self.out_c.has_func( 'function_40bde0' )
        assert self.out_c.has_func( 'function_40bdf0' )
        assert self.out_c.has_func( 'function_40bff0' )
        assert self.out_c.has_func( 'function_40c070' )
        assert self.out_c.has_func( 'function_40c110' )
        assert self.out_c.has_func( 'function_40c1b0' )
        assert self.out_c.has_func( 'function_40c250' )
        assert self.out_c.has_func( 'function_40c2c0' )
        assert self.out_c.has_func( 'function_40c310' )
        assert self.out_c.has_func( 'function_40c370' )
        assert self.out_c.has_func( 'function_40c3e0' )
        assert self.out_c.has_func( 'function_40c410' )
        assert self.out_c.has_func( 'function_40c430' )
        assert self.out_c.has_func( 'function_40c5a0' )
        assert self.out_c.has_func( 'function_40c700' )
        assert self.out_c.has_func( 'function_40c720' )
        assert self.out_c.has_func( 'function_40c740' )
        assert self.out_c.has_func( 'function_40c790' )
        assert self.out_c.has_func( 'function_40c7a0' )
        assert self.out_c.has_func( 'function_40c800' )
        assert self.out_c.has_func( 'function_40c860' )
        assert self.out_c.has_func( 'function_40c8d0' )
        assert self.out_c.has_func( 'function_40c8f0' )
        assert self.out_c.has_func( 'function_40c970' )
        assert self.out_c.has_func( 'function_40ca00' )
        assert self.out_c.has_func( 'function_40cb80' )
        assert self.out_c.has_func( 'function_40cc20' )
        assert self.out_c.has_func( 'function_40cc70' )
        assert self.out_c.has_func( 'function_40cc90' )
        assert self.out_c.has_func( 'function_40cd30' )
        assert self.out_c.has_func( 'function_40cda0' )
        assert self.out_c.has_func( 'function_40ce20' )
        assert self.out_c.has_func( 'function_40ce84' )
        assert self.out_c.has_func( 'function_40cea0' )
        assert self.out_c.has_func( 'function_40cf10' )
        assert self.out_c.has_func( 'function_40cfd0' )
        assert self.out_c.has_func( 'function_40d410' )
        assert self.out_c.has_func( 'function_40d430' )
        assert self.out_c.has_func( 'function_40d560' )
        assert self.out_c.has_func( 'function_40d6a0' )
        assert self.out_c.has_func( 'function_40d7b0' )
        assert self.out_c.has_func( 'function_40d880' )
        assert self.out_c.has_func( 'function_40d980' )
        assert self.out_c.has_func( 'function_40d9f0' )
        assert self.out_c.has_func( 'function_40db20' )
        assert self.out_c.has_func( 'function_40db84' )
        assert self.out_c.has_func( 'function_40dba0' )
        assert self.out_c.has_func( 'function_40dd10' )
        assert self.out_c.has_func( 'function_40def0' )
        assert self.out_c.has_func( 'function_40df60' )
        assert self.out_c.has_func( 'function_40e000' )
        assert self.out_c.has_func( 'function_40e0a0' )
        assert self.out_c.has_func( 'function_40e220' )
        assert self.out_c.has_func( 'function_40e290' )
        assert self.out_c.has_func( 'function_40e2f0' )
        assert self.out_c.has_func( 'function_40e357' )
        assert self.out_c.has_func( 'function_40e370' )
        assert self.out_c.has_func( 'function_40e3d0' )
        assert self.out_c.has_func( 'function_40e450' )
        assert self.out_c.has_func( 'function_40e4a0' )
        assert self.out_c.has_func( 'function_40e560' )
        assert self.out_c.has_func( 'function_40e5e0' )
        assert self.out_c.has_func( 'function_40e620' )
        assert self.out_c.has_func( 'function_40e6a0' )
        assert self.out_c.has_func( 'function_40e701' )
        assert self.out_c.has_func( 'function_40e720' )
        assert self.out_c.has_func( 'function_40e900' )
        assert self.out_c.has_func( 'function_40e990' )
        assert self.out_c.has_func( 'function_40ebc0' )
        assert self.out_c.has_func( 'function_40ec60' )
        assert self.out_c.has_func( 'function_40edd0' )
        assert self.out_c.has_func( 'function_40ee80' )
        assert self.out_c.has_func( 'function_40ef30' )
        assert self.out_c.has_func( 'function_40ef40' )
        assert self.out_c.has_func( 'function_40ef50' )
        assert self.out_c.has_func( 'function_40ef80' )
        assert self.out_c.has_func( 'function_40efd0' )
        assert self.out_c.has_func( 'function_40f1a0' )
        assert self.out_c.has_func( 'function_40f270' )
        assert self.out_c.has_func( 'function_40f280' )
        assert self.out_c.has_func( 'function_40f2e0' )
        assert self.out_c.has_func( 'function_40f3d0' )
        assert self.out_c.has_func( 'function_40f660' )
        assert self.out_c.has_func( 'function_40f6b0' )
        assert self.out_c.has_func( 'function_40f790' )
        assert self.out_c.has_func( 'function_40fa20' )
        assert self.out_c.has_func( 'function_40fb70' )
        assert self.out_c.has_func( 'function_40fc10' )
        assert self.out_c.has_func( 'function_40fc80' )
        assert self.out_c.has_func( 'function_40fce0' )
        assert self.out_c.has_func( 'function_40fd60' )
        assert self.out_c.has_func( 'function_40fdd0' )
        assert self.out_c.has_func( 'function_40ff70' )
        assert self.out_c.has_func( 'function_410260' )
        assert self.out_c.has_func( 'function_4102a0' )
        assert self.out_c.has_func( 'function_410350' )
        assert self.out_c.has_func( 'function_410370' )
        assert self.out_c.has_func( 'function_4104f0' )
        assert self.out_c.has_func( 'function_4105c0' )
        assert self.out_c.has_func( 'function_410670' )
        assert self.out_c.has_func( 'function_410770' )
        assert self.out_c.has_func( 'function_410830' )
        assert self.out_c.has_func( 'function_410930' )

    # jk: the commented asserts in the following test represent function calls
    # detected by Hex-Rays, but not by us
    def test_check_std_functions_calls(self):
        # for some reason, many calls are not recognized in windows, even even though they are present
        if on_windows():
            return

        fnc = self.out_c.funcs[ 'function_401000' ]
        assert fnc.calls( 'DeleteFileW' )
        assert fnc.calls( 'GetLastError' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'SetFileAttributesW' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_401080' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_4010c0' ]
        assert fnc.calls( 'CommandLineToArgvW' )
        assert fnc.calls( 'LocalFree' )
        fnc = self.out_c.funcs[ 'function_401200' ]
        assert fnc.calls( 'DispatchMessageW' )
        assert fnc.calls( 'IsDialogMessageW' )
        assert fnc.calls( 'MsgWaitForMultipleObjects' )
        assert fnc.calls( 'PeekMessageW' )
        assert fnc.calls( 'PostQuitMessage' )
        assert fnc.calls( 'TranslateMessage' )
        fnc = self.out_c.funcs[ 'function_4012b0' ]
        # assert fnc.calls( 'CoInitializeEx' )
        # assert fnc.calls( 'GdiplusStartup' )
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'InitializeCriticalSection' )
        fnc = self.out_c.funcs[ 'function_4013e0' ]
        assert fnc.calls( 'CreateEventW' )
        #assert fnc.calls( 'EnterCriticalSection' )
        #assert fnc.calls( 'function_401080' )
        assert fnc.calls( 'function_4010c0' )
        assert fnc.calls( 'function_401e10' )
        assert fnc.calls( 'function_405880' )
        #assert fnc.calls( 'function_409540' )
        #assert fnc.calls( 'function_40c8d0' )
        assert fnc.calls( 'function_40ec60' )
        #assert fnc.calls( 'function_4102a0' )
        assert fnc.calls( 'GetComputerNameW' )
        assert fnc.calls( 'GetModuleFileNameW' )
        #assert fnc.calls( 'GetProcessHeap' )
        #assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'InitCommonControlsEx' )
        #assert fnc.calls( 'LeaveCriticalSection' )
        # assert fnc.calls( 'LoadLibraryW' )
        fnc = self.out_c.funcs[ 'function_401610' ]
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'GdiplusShutdown' )
        assert fnc.calls( 'CoUninitialize' )
        assert fnc.calls( 'DeleteCriticalSection' )
        assert fnc.calls( 'DestroyWindow' )
        #assert fnc.calls( 'GdiplusShutdown' )
        assert fnc.calls( 'function_4017e0' )
        assert fnc.calls( 'function_4073e0' )
        assert fnc.calls( 'function_4095d0' )
        assert fnc.calls( 'function_40b670' )
        assert fnc.calls( 'function_40ebc0' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SetEvent' )
        assert fnc.calls( 'UnregisterClassW' )
        fnc = self.out_c.funcs[ 'function_4017e0' ]
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'DeleteCriticalSection' )
        assert fnc.calls( 'function_401e10' )
        assert fnc.calls( 'function_4042e0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_401850' ]
        assert fnc.calls( 'DeleteCriticalSection' )
        assert fnc.calls( 'function_4073e0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_4018a0' ]
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'PostMessageW' )
        assert fnc.calls( 'PostQuitMessage' )
        assert fnc.calls( 'SetEvent' )
        fnc = self.out_c.funcs[ 'function_401910' ]
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'ShellExecuteExW' )
        fnc = self.out_c.funcs[ 'function_401990' ]
        # assert fnc.calls( 'CreateMutexW' )
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_401200' )
        assert fnc.calls( 'function_4017e0' )
        assert fnc.calls( 'function_401850' )
        assert fnc.calls( 'function_403a70' )
        assert fnc.calls( 'function_403b60' )
        assert fnc.calls( 'function_409540' )
        assert fnc.calls( 'function_40b5a0' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'function_40e900' )
        assert fnc.calls( 'function_40e990' )
        assert fnc.calls( 'function_40fc80' )
        assert fnc.calls( 'function_410260' )
        assert fnc.calls( 'GetCurrentThread' )
        assert fnc.calls( 'GetLastError' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'SetThreadPriority' )
        assert fnc.calls( 'StringFromGUID2' )
        fnc = self.out_c.funcs[ 'function_401d60' ]
        assert fnc.calls( 'DeleteCriticalSection' )
        # assert fnc.calls( 'function_4012b0' )
        assert fnc.calls( 'function_4013e0' )
        assert fnc.calls( 'function_401610' )
        assert fnc.calls( 'function_401990' )
        assert fnc.calls( 'GetCommandLineW' )
        # assert fnc.calls( 'GetModuleHandleW' )
        assert fnc.calls( 'InitializeCriticalSection' )
        assert fnc.calls( 'SetErrorMode' )
        fnc = self.out_c.funcs[ 'entry_point' ]
        assert fnc.calls( 'ExitProcess' )
        assert fnc.calls( 'function_401d60' )
        fnc = self.out_c.funcs[ 'function_401e10' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_401e70' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_401ec0' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_401ee0' ]
        assert fnc.calls( 'function_4020e0' )
        fnc = self.out_c.funcs[ 'function_401f20' ]
        assert fnc.calls( 'function_40c860' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_401f90' ]
        assert fnc.calls( 'function_40c740' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        fnc = self.out_c.funcs[ 'function_402030' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_402060' ]
        assert fnc.calls( 'function_40c860' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_4020c0' ]
        assert fnc.calls( 'function_40c860' )
        fnc = self.out_c.funcs[ 'function_4020e0' ]
        assert fnc.calls( 'function_40c740' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        fnc = self.out_c.funcs[ 'function_402150' ]
        fnc = self.out_c.funcs[ 'function_4021f0' ]
        assert fnc.calls( 'function_409010' )
        assert fnc.calls( 'function_4092a0' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'GetCurrentThread' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'PathQuoteSpacesW' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SetThreadPriority' )
        assert fnc.calls( 'StrCmpW' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_402360' ]
        fnc = self.out_c.funcs[ 'function_402370' ]
        fnc = self.out_c.funcs[ 'function_402380' ]
        assert fnc.calls( 'ExpandEnvironmentStringsW' )
        assert fnc.calls( 'function_405880' )
        assert fnc.calls( 'function_408ae0' )
        assert fnc.calls( 'GetTempPathW' )
        assert fnc.calls( 'CharLowerW' )
        assert fnc.calls( 'PathRemoveBackslashW' )
        fnc = self.out_c.funcs[ 'function_402480' ]
        assert fnc.calls( 'function_402680' )
        assert fnc.calls( 'function_410670' )
        assert fnc.calls( 'function_410770' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_402680' ]
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'CreateFileW' )
        assert fnc.calls( 'function_403c80' )
        assert fnc.calls( 'function_404420' )
        assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'function_4105c0' )
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'MessageBoxIndirectW' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_4028d0' ]
        assert fnc.calls( 'function_404370' )
        assert fnc.calls( 'function_409140' )
        assert fnc.calls( 'function_410370' )
        #assert fnc.calls( 'function_410930' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_402b20' ]
        assert fnc.calls( 'CloseHandle' )
        # assert fnc.calls( 'CreateEventW' )
        assert fnc.calls( 'function_407c00' )
        fnc = self.out_c.funcs[ 'function_402be0' ]
        #assert fnc.calls( 'function_4109d0' )
        #assert fnc.calls( 'function_410a10' )
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_402ca0' ]
        assert fnc.calls( 'function_405a70' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_402e20' ]
        assert fnc.calls( 'function_405a70' )
        fnc = self.out_c.funcs[ 'function_402e90' ]
        fnc = self.out_c.funcs[ 'function_402ea0' ]
        assert fnc.calls( 'function_405570' )
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_402f90' ]
        # assert fnc.calls( 'GetDiskFreeSpaceExW' )
        assert fnc.calls( 'GetDriveTypeW' )
        # assert fnc.calls( 'GetVolumeInformationW' )
        fnc = self.out_c.funcs[ 'function_403010' ]
        assert fnc.calls( 'function_410370' )
        assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_403070' ]
        #assert fnc.calls( 'function_410a10' )
        assert fnc.calls( 'function_402ea0' )
        assert fnc.calls( 'function_403010' )
        assert fnc.calls( 'function_410370' )
        assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'GetDiskFreeSpaceExW' )
        assert fnc.calls( 'GetDriveTypeW' )
        assert fnc.calls( 'GetLogicalDrives' )
        assert fnc.calls( 'GetSystemTime' )
        assert fnc.calls( 'GetVolumeInformationW' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'RegQueryValueExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SystemTimeToFileTime' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_4033b0' ]
        assert fnc.calls( 'function_402380' )
        assert fnc.calls( 'function_4028d0' )
        assert fnc.calls( 'ResetEvent' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_403a70' ]
        assert fnc.calls( 'InitializeCriticalSection' )
        assert fnc.calls( 'memset' )
        fnc = self.out_c.funcs[ 'function_403b60' ]
        # assert fnc.calls( 'CreateEventW' )
        assert fnc.calls( 'function_409540' )
        fnc = self.out_c.funcs[ 'function_403bf0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_403c80' ]
        assert fnc.calls( 'CryptDestroyHash' )
        assert fnc.calls( 'function_403bf0' )
        assert fnc.calls( 'function_404d60' )
        assert fnc.calls( 'function_404e00' )
        assert fnc.calls( 'SetLastError' )
        fnc = self.out_c.funcs[ 'function_403d70' ]
        assert fnc.calls( 'CryptDestroyHash' )
        assert fnc.calls( 'function_4047c0' )
        assert fnc.calls( 'function_404960' )
        assert fnc.calls( 'function_404d60' )
        assert fnc.calls( 'function_404e00' )
        #assert fnc.calls( 'function_40c8d0' )
        assert fnc.calls( 'HeapFree' )
        #assert fnc.calls( 'WriteFile' )
        fnc = self.out_c.funcs[ 'function_403eb0' ]
        assert fnc.calls( 'FlushFileBuffers' )
        assert fnc.calls( 'function_403bf0' )
        assert fnc.calls( 'GetFileSizeEx' )
        assert fnc.calls( 'GetTickCount' )
        # Do not check the following call because it is not detected on Windows
        # due to a syntax error.
        # assert fnc.calls( 'SetFilePointerEx' )
        assert fnc.calls( 'Sleep' )
        # assert fnc.calls( 'WriteFile' )
        fnc = self.out_c.funcs[ 'function_404040' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptGenKey' )
        assert fnc.calls( 'function_403bf0' )
        assert fnc.calls( 'function_403d70' )
        assert fnc.calls( 'function_404620' )
        assert fnc.calls( 'function_4046c0' )
        assert fnc.calls( 'function_4048a0' )
        assert fnc.calls( 'function_404a50' )
        assert fnc.calls( 'GetFileSizeEx' )
        fnc = self.out_c.funcs[ 'function_4042e0' ]
        assert fnc.calls( 'CryptDestroyHash' )
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptReleaseContext' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_404370' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptGetKeyParam' )
        assert fnc.calls( 'CryptImportKey' )
        assert fnc.calls( 'function_404620' )
        fnc = self.out_c.funcs[ 'function_404420' ]
        assert fnc.calls( 'CreateFileW' )
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'GetFileAttributesW' )
        assert fnc.calls( 'MoveFileExW' )
        assert fnc.calls( 'SetFileAttributesW' )
        assert fnc.calls( 'function_403c80' )
        assert fnc.calls( 'function_405390' )
        assert fnc.calls( 'function_405460' )
        assert fnc.calls( 'function_40c070' )
        assert fnc.calls( 'function_40c370' )
        fnc = self.out_c.funcs[ 'function_404620' ]
        assert fnc.calls( 'CryptAcquireContextW' )
        fnc = self.out_c.funcs[ 'function_404690' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptReleaseContext' )
        fnc = self.out_c.funcs[ 'function_4046c0' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptImportKey' )
        assert fnc.calls( 'function_404620' )
        fnc = self.out_c.funcs[ 'function_404720' ]
        assert fnc.calls( 'CryptAcquireContextW' )
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptImportPublicKeyInfo' )
        fnc = self.out_c.funcs[ 'function_4047c0' ]
        assert fnc.calls( 'CryptExportKey' )
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_4048a0' ]
        assert fnc.calls( 'CryptGetKeyParam' )
        fnc = self.out_c.funcs[ 'function_4048f0' ]
        assert fnc.calls( 'CryptEncrypt' )
        assert fnc.calls( 'memcpy' )

        # TODO: temporarily disable following tests.
        #       on some macos machines the tests fail (i.e., GH Actions).
        #       going case by case and disabling them is not feasable at the moment.
        if on_macos():
            return

        fnc = self.out_c.funcs[ 'function_404960' ]
        assert fnc.calls( 'CryptEncrypt' )
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_4048f0' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_404a50' ]
        assert fnc.calls( 'CryptDecrypt' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_404ac0' ]
        assert fnc.calls( 'CryptDecrypt' )
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_404ba0' ]
        assert fnc.calls( 'CryptStringToBinaryA' )
        assert fnc.calls( 'function_40c250' )
        fnc = self.out_c.funcs[ 'function_404c90' ]
        #assert fnc.calls( 'CryptDecodeObjectEx' )
        assert fnc.calls( 'function_404ba0' )
        #assert fnc.calls( 'LocalFree' )
        fnc = self.out_c.funcs[ 'function_404d10' ]
        assert fnc.calls( 'CryptDestroyHash' )
        assert fnc.calls( 'CryptReleaseContext' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_404d60' ]
        assert fnc.calls( 'CryptAcquireContextW' )
        assert fnc.calls( 'CryptCreateHash' )
        assert fnc.calls( 'CryptHashData' )
        fnc = self.out_c.funcs[ 'function_404e00' ]
        assert fnc.calls( 'CryptGetHashParam' )
        fnc = self.out_c.funcs[ 'function_404e50' ]
        assert fnc.calls( 'function_404d60' )
        fnc = self.out_c.funcs[ 'function_404ef0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_404f60' )
        assert fnc.calls( 'GetTickCount' )
        assert fnc.calls( 'InitializeCriticalSection' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'QueryPerformanceCounter' )
        fnc = self.out_c.funcs[ 'function_404f60' ]
        fnc = self.out_c.funcs[ 'function_404fa0' ]
        fnc = self.out_c.funcs[ 'function_4050b0' ]
        assert fnc.calls( 'DeleteCriticalSection' )
        fnc = self.out_c.funcs[ 'function_4050c0' ]
        #assert fnc.calls( 'CreateFileW' )
        #assert fnc.calls( 'EnterCriticalSection' )
        #assert fnc.calls( 'function_404ef0' )
        #assert fnc.calls( 'function_404fa0' )
        #assert fnc.calls( 'function_40c370' )
        #assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'GetTempPathW' )
        #assert fnc.calls( 'LeaveCriticalSection' )
        #assert fnc.calls( 'PathAddBackslashW' )
        fnc = self.out_c.funcs[ 'function_405250' ]
        assert fnc.calls( 'ReadFile' )
        assert fnc.calls( 'SetLastError' )
        fnc = self.out_c.funcs[ 'function_405290' ]
        assert fnc.calls( 'GetModuleHandleW' )
        assert fnc.calls( 'GetProcAddress' )
        assert fnc.calls( 'SetLastError' )
        fnc = self.out_c.funcs[ 'function_405310' ]
        assert fnc.calls( 'GetModuleHandleW' )
        assert fnc.calls( 'GetProcAddress' )
        assert fnc.calls( 'SetLastError' )
        fnc = self.out_c.funcs[ 'function_405390' ]
        assert fnc.calls( 'function_405290' )
        assert fnc.calls( 'GetFileTime' )
        fnc = self.out_c.funcs[ 'function_405460' ]
        assert fnc.calls( 'function_405290' )
        assert fnc.calls( 'function_405310' )
        assert fnc.calls( 'SetFileTime' )
        fnc = self.out_c.funcs[ 'function_405550' ]
        assert fnc.calls( 'DeleteFileW' )
        assert fnc.calls( 'SetFileAttributesW' )
        fnc = self.out_c.funcs[ 'function_405570' ]
        assert fnc.calls( 'FindClose' )
        assert fnc.calls( 'FindFirstFileW' )
        assert fnc.calls( 'FindNextFileW' )
        assert fnc.calls( 'function_405750' )
        assert fnc.calls( 'function_405a70' )
        assert fnc.calls( 'GetLastError' )
        assert fnc.calls( 'SetLastError' )
        fnc = self.out_c.funcs[ 'function_405750' ]
        assert fnc.calls( 'PathMatchSpecW' )
        fnc = self.out_c.funcs[ 'function_405830' ]
        fnc = self.out_c.funcs[ 'function_405880' ]
        #assert fnc.calls( 'CoTaskMemFree' )
        assert fnc.calls( 'GetModuleHandleW' )
        assert fnc.calls( 'GetProcAddress' )
        assert fnc.calls( 'PathRemoveBackslashW' )
        assert fnc.calls( 'SetLastError' )
        assert fnc.calls( 'SHGetFolderPathW' )
        fnc = self.out_c.funcs[ 'function_405a70' ]
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'memcpy' )
        assert fnc.calls( 'PathRemoveBackslashW' )
        fnc = self.out_c.funcs[ 'function_405bd0' ]
        assert fnc.calls( 'CreateFontIndirectW' )
        assert fnc.calls( 'function_40c370' )
        fnc = self.out_c.funcs[ 'function_405c40' ]
        assert fnc.calls( 'GdipDisposeImage' )
        assert fnc.calls( 'GdipFree' )
        fnc = self.out_c.funcs[ 'function_405c70' ]
        assert fnc.calls( 'GdipAlloc' )
        assert fnc.calls( 'GdipCloneImage' )
        fnc = self.out_c.funcs[ 'function_405cc0' ]
        assert fnc.calls( 'function_406010' )
        assert fnc.calls( 'function_406250' )
        assert fnc.calls( 'function_4062f0' )
        assert fnc.calls( 'function_406bd0' )
        fnc = self.out_c.funcs[ 'function_405dc0' ]
        assert fnc.calls( 'CreateFontIndirectW' )
        assert fnc.calls( 'function_405bd0' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'GetDlgItem' )
        assert fnc.calls( 'MoveWindow' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetScrollInfo' )
        assert fnc.calls( 'SetWindowSubclass' )
        assert fnc.calls( 'SetWindowTextW' )
        fnc = self.out_c.funcs[ 'function_406010' ]
        # Do not check the following call because it is not detected on Windows
        # due to a syntax error.
        # assert fnc.calls( 'AlphaBlend' )
        assert fnc.calls( 'BeginPaint' )
        assert fnc.calls( 'CreateCompatibleDC' )
        assert fnc.calls( 'DeleteDC' )
        assert fnc.calls( 'DrawTextW' )
        assert fnc.calls( 'EndPaint' )
        assert fnc.calls( 'GetScrollInfo' )
        assert fnc.calls( 'IntersectRect' )
        assert fnc.calls( 'SelectObject' )
        assert fnc.calls( 'SetBkMode' )
        assert fnc.calls( 'SetTextColor' )
        fnc = self.out_c.funcs[ 'function_406250' ]
        assert fnc.calls( 'CreateSolidBrush' )
        assert fnc.calls( 'GetDlgCtrlID' )
        assert fnc.calls( 'SetBkColor' )
        assert fnc.calls( 'SetTextColor' )
        fnc = self.out_c.funcs[ 'function_4062f0' ]
        # Do not check the following call because it is not detected on Windows
        # due to a syntax error.
        # assert fnc.calls( 'AlphaBlend' )
        assert fnc.calls( 'CreateCompatibleDC' )
        assert fnc.calls( 'DeleteDC' )
        assert fnc.calls( 'DrawFocusRect' )
        assert fnc.calls( 'GetClientRect' )
        assert fnc.calls( 'GetParent' )
        assert fnc.calls( 'GetScrollInfo' )
        assert fnc.calls( 'ScreenToClient' )
        assert fnc.calls( 'SelectObject' )
        fnc = self.out_c.funcs[ 'function_406480' ]
        assert fnc.calls( 'DefSubclassProc' )
        assert fnc.calls( 'function_407140' )
        fnc = self.out_c.funcs[ 'function_4064d0' ]
        #fnc = self.out_c.funcs[ 'function_4064e0' ]
        fnc = self.out_c.funcs[ 'function_4064f0' ]
        fnc = self.out_c.funcs[ 'function_406500' ]
        fnc = self.out_c.funcs[ 'function_4065b0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_406610' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_406610' ]
        assert fnc.calls( 'DeleteObject' )
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'EndDialog' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_406720' ]
        assert fnc.calls( 'CreateSolidBrush' )
        assert fnc.calls( 'function_40c800' )
        assert fnc.calls( 'GdipCreateHBITMAPFromBitmap' )
        assert fnc.calls( 'GetObjectW' )
        fnc = self.out_c.funcs[ 'function_4067d4' ]
        assert fnc.calls( 'function_4065b0' )
        fnc = self.out_c.funcs[ 'function_4067f0' ]
        assert fnc.calls( 'DefSubclassProc' )
        #assert fnc.calls( 'GetKeyState' )
        assert fnc.calls( 'GetParent' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'SendMessageW' )
        #fnc = self.out_c.funcs[ 'function_406b90' ]
        #assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_406bd0' ]
        fnc = self.out_c.funcs[ 'function_406cb0' ]
        assert fnc.calls( 'function_406f90' )
        fnc = self.out_c.funcs[ 'function_406cd0' ]
        assert fnc.calls( 'function_406f90' )
        fnc = self.out_c.funcs[ 'function_406cf0' ]
        assert fnc.calls( 'GetScrollInfo' )
        assert fnc.calls( 'ScrollWindowEx' )
        assert fnc.calls( 'SetScrollInfo' )
        assert fnc.calls( 'UpdateWindow' )
        fnc = self.out_c.funcs[ 'function_406ec0' ]
        assert fnc.calls( 'function_407140' )
        fnc = self.out_c.funcs[ 'function_406ee0' ]
        assert fnc.calls( 'function_406f90' )
        assert fnc.calls( 'GetScrollInfo' )
        assert fnc.calls( 'SystemParametersInfoW' )
        fnc = self.out_c.funcs[ 'function_406f90' ]
        assert fnc.calls( 'GetScrollInfo' )
        assert fnc.calls( 'ScrollWindowEx' )
        assert fnc.calls( 'SetScrollInfo' )
        assert fnc.calls( 'UpdateWindow' )
        fnc = self.out_c.funcs[ 'function_4070f0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_407140' ]
        assert fnc.calls( 'GetKeyState' )
        assert fnc.calls( 'GetScrollInfo' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_407270' ]
        assert fnc.calls( 'GetScrollInfo' )
        fnc = self.out_c.funcs[ 'function_407300' ]
        assert fnc.calls( 'GetSystemMetrics' )
        assert fnc.calls( 'SetWindowPos' )
        fnc = self.out_c.funcs[ 'function_407372' ]
        assert fnc.calls( 'function_406bd0' )
        fnc = self.out_c.funcs[ 'function_407390' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_4073e0' ]
        fnc = self.out_c.funcs[ 'function_407470' ]
        assert fnc.calls( 'function_408250' )
        assert fnc.calls( 'function_4082e0' )
        assert fnc.calls( 'WaitForSingleObject' )
        assert fnc.calls( 'WinHttpCloseHandle' )
        fnc = self.out_c.funcs[ 'function_407730' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptGenKey' )
        #assert fnc.calls( 'CryptReleaseContext' )
        assert fnc.calls( 'function_404620' )
        assert fnc.calls( 'function_4047c0' )
        assert fnc.calls( 'function_404960' )
        assert fnc.calls( 'function_40c970' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_4078f0' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptImportKey' )
        #assert fnc.calls( 'CryptReleaseContext' )
        assert fnc.calls( 'function_404620' )
        assert fnc.calls( 'function_404ac0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_407c00' ]
        assert fnc.calls( 'function_40c720' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_407fc0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_408010' ]
        assert fnc.calls( 'function_4080f0' )
        fnc = self.out_c.funcs[ 'function_408070' ]
        assert fnc.calls( 'function_40c860' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_4080d0' ]
        assert fnc.calls( 'function_40c860' )
        fnc = self.out_c.funcs[ 'function_4080f0' ]
        assert fnc.calls( 'function_40c740' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        fnc = self.out_c.funcs[ 'function_408160' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'FreeLibrary' )
        assert fnc.calls( 'GetProcAddress' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'LoadLibraryW' )
        fnc = self.out_c.funcs[ 'function_408250' ]
        assert fnc.calls( 'function_408160' )
        assert fnc.calls( 'function_408980' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'WinHttpOpen' )
        fnc = self.out_c.funcs[ 'function_4082e0' ]
        assert fnc.calls( 'WinHttpCloseHandle' )
        assert fnc.calls( 'WinHttpConnect' )
        fnc = self.out_c.funcs[ 'function_408340' ]
        assert fnc.calls( 'WinHttpAddRequestHeaders' )
        assert fnc.calls( 'WinHttpCloseHandle' )
        assert fnc.calls( 'WinHttpOpenRequest' )
        assert fnc.calls( 'WinHttpSendRequest' )
        fnc = self.out_c.funcs[ 'function_408410' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'memcpy' )
        assert fnc.calls( 'SetLastError' )
        assert fnc.calls( 'WaitForSingleObject' )
        assert fnc.calls( 'WinHttpReadData' )
        fnc = self.out_c.funcs[ 'function_408640' ]
        assert fnc.calls( 'WinHttpQueryHeaders' )
        fnc = self.out_c.funcs[ 'function_408690' ]
        assert fnc.calls( 'function_40c250' )
        fnc = self.out_c.funcs[ 'function_408760' ]
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'WideCharToMultiByte' )
        fnc = self.out_c.funcs[ 'function_4087f0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_408760' )
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'WideCharToMultiByte' )
        fnc = self.out_c.funcs[ 'function_408900' ]
        assert fnc.calls( 'function_40c250' )
        assert fnc.calls( 'MultiByteToWideChar' )
        fnc = self.out_c.funcs[ 'function_408980' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_408900' )
        assert fnc.calls( 'function_40c250' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'MultiByteToWideChar' )
        fnc = self.out_c.funcs[ 'function_408a70' ]
        fnc = self.out_c.funcs[ 'function_408ae0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_408bc0' ]
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_408c80' ]
        assert fnc.calls( 'function_40c7a0' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'WideCharToMultiByte' )
        fnc = self.out_c.funcs[ 'function_408d30' ]
        assert fnc.calls( 'CloseClipboard' )
        assert fnc.calls( 'EmptyClipboard' )
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'GlobalAlloc' )
        assert fnc.calls( 'GlobalFree' )
        assert fnc.calls( 'GlobalLock' )
        assert fnc.calls( 'GlobalUnlock' )
        assert fnc.calls( 'memcpy' )
        assert fnc.calls( 'OpenClipboard' )
        assert fnc.calls( 'SetClipboardData' )
        fnc = self.out_c.funcs[ 'function_408e10' ]
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'SetLastError' )
        assert fnc.calls( 'function_40c7a0' )
        assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_408f10' ]
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'CreateProcessW' )
        assert fnc.calls( 'memset' )
        fnc = self.out_c.funcs[ 'function_408fc0' ]
        assert fnc.calls( 'function_408e10' )
        assert fnc.calls( 'function_408f10' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_409010' ]
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegCreateKeyExW' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegSetValueExW' )
        fnc = self.out_c.funcs[ 'function_4090c0' ]
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegCreateKeyExW' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegSetValueExW' )
        fnc = self.out_c.funcs[ 'function_409140' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'RegQueryValueExW' )
        fnc = self.out_c.funcs[ 'function_4092a0' ]
        assert fnc.calls( 'RegQueryValueExW' )
        fnc = self.out_c.funcs[ 'function_409340' ]
        assert fnc.calls( 'GetModuleHandleW' )
        assert fnc.calls( 'GetProcAddress' )
        assert fnc.calls( 'RegDeleteKeyW' )
        fnc = self.out_c.funcs[ 'function_4093a0' ]
        assert fnc.calls( 'function_409340' )
        assert fnc.calls( 'function_4093a0' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegEnumKeyExW' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'RegQueryInfoKeyW' )
        fnc = self.out_c.funcs[ 'function_409530' ]
        fnc = self.out_c.funcs[ 'function_409540' ]
        assert fnc.calls( 'CreateThread' )
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_40c860' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'ResumeThread' )
        fnc = self.out_c.funcs[ 'function_4095d0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_409650' ]
        assert fnc.calls( 'DestroyMenu' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_409690' ]
        assert fnc.calls( 'GetCursorPos' )
        assert fnc.calls( 'TrackPopupMenu' )
        fnc = self.out_c.funcs[ 'function_4096f0' ]
        assert fnc.calls( 'GdipAlloc' )
        assert fnc.calls( 'GdipCloneBrush' )
        assert fnc.calls( 'GdipDeleteBrush' )
        fnc = self.out_c.funcs[ 'function_409750' ]
        assert fnc.calls( 'GdipDeleteBrush' )
        assert fnc.calls( 'GdipFree' )
        fnc = self.out_c.funcs[ 'function_409780' ]
        assert fnc.calls( 'GdipDrawString' )
        fnc = self.out_c.funcs[ 'function_4097e0' ]
        assert fnc.calls( 'GdipCreateFontFromDC' )
        assert fnc.calls( 'GdipCreateFontFromLogfontA' )
        assert fnc.calls( 'GetObjectA' )
        fnc = self.out_c.funcs[ 'function_409850' ]
        assert fnc.calls( 'function_405cc0' )
        assert fnc.calls( 'function_409a70' )
        assert fnc.calls( 'function_409b60' )
        assert fnc.calls( 'function_409c60' )
        assert fnc.calls( 'function_40a070' )
        fnc = self.out_c.funcs[ 'function_4099a0' ]
        assert fnc.calls( 'function_405dc0' )
        assert fnc.calls( 'SetTimer' )
        fnc = self.out_c.funcs[ 'function_409a70' ]
        assert fnc.calls( 'function_406ee0' )
        assert fnc.calls( 'GetDlgItem' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'GetWindowRect' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_409b50' ]
        fnc = self.out_c.funcs[ 'function_409b60' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_409da0' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_409c60' ]
        assert fnc.calls( 'AppendMenuW' )
        assert fnc.calls( 'ClientToScreen' )
        assert fnc.calls( 'CreatePopupMenu' )
        assert fnc.calls( 'DestroyMenu' )
        assert fnc.calls( 'function_409690' )
        assert fnc.calls( 'GetCaretPos' )
        assert fnc.calls( 'GetWindowRect' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_409da0' ]
        assert fnc.calls( 'AppendMenuW' )
        assert fnc.calls( 'CreatePopupMenu' )
        assert fnc.calls( 'DestroyMenu' )
        assert fnc.calls( 'DialogBoxParamW' )
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_401910' )
        #assert fnc.calls( 'function_408d30' )
        assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'function_40e220' )
        assert fnc.calls( 'GetCursorPos' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'SetMenuDefaultItem' )
        assert fnc.calls( 'StrCmpNW' )
        assert fnc.calls( 'StrCmpW' )
        assert fnc.calls( 'StrChrW' )
        assert fnc.calls( 'TrackPopupMenu' )
        fnc = self.out_c.funcs[ 'function_40a070' ]
        #assert fnc.calls( 'function_410a10' )
        assert fnc.calls( 'function_407270' )
        assert fnc.calls( 'function_40a660' )
        assert fnc.calls( 'function_40ba10' )
        assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'GetSystemTime' )
        assert fnc.calls( 'GetTickCount' )
        assert fnc.calls( 'InvalidateRect' )
        assert fnc.calls( 'memset' )
        #assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        #assert fnc.calls( 'RegQueryValueExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SystemTimeToFileTime' )
        assert fnc.calls( 'UpdateWindow' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40a370' ]
        assert fnc.calls( 'CreateCompatibleDC' )
        assert fnc.calls( 'DeleteDC' )
        assert fnc.calls( 'function_4097e0' )
        assert fnc.calls( 'GdipCreateFromHDC' )
        assert fnc.calls( 'GdipDeleteGraphics' )
        assert fnc.calls( 'GdipDrawImageRectI' )
        assert fnc.calls( 'GetClassNameW' )
        assert fnc.calls( 'GetDC' )
        assert fnc.calls( 'ReleaseDC' )
        assert fnc.calls( 'SelectObject' )
        assert fnc.calls( 'StrCmpIW' )
        fnc = self.out_c.funcs[ 'function_40a5f0' ]
        #fnc = self.out_c.funcs[ 'function_40a650' ]
        fnc = self.out_c.funcs[ 'function_40a660' ]
        #assert fnc.calls( 'function_4109d0' )
        assert fnc.calls( 'FileTimeToLocalFileTime' )
        assert fnc.calls( 'FileTimeToSystemTime' )
        assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'GetDateFormatW' )
        assert fnc.calls( 'GetTimeFormatW' )
        fnc = self.out_c.funcs[ 'function_40a760' ]
        #assert fnc.calls( 'function_410a10' )
        #assert fnc.calls( 'FindResourceExW' ) # this function is called, but call is not found by tests
        assert fnc.calls( 'function_40c250' )
        assert fnc.calls( 'function_40c8f0' )
        assert fnc.calls( 'function_40ca00' )
        assert fnc.calls( 'GetDC' )
        assert fnc.calls( 'GetDeviceCaps' )
        assert fnc.calls( 'GetDlgItem' )
        assert fnc.calls( 'GetSystemTime' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LoadResource' )
        assert fnc.calls( 'LockResource' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'RegQueryValueExW' )
        assert fnc.calls( 'ReleaseDC' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetWindowSubclass' )
        assert fnc.calls( 'ShowWindow' )
        assert fnc.calls( 'SizeofResource' )
        assert fnc.calls( 'SystemTimeToFileTime' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40abf0' ]
        assert fnc.calls( 'function_406500' )
        assert fnc.calls( 'memset' )
        fnc = self.out_c.funcs[ 'function_40ac70' ]
        assert fnc.calls( 'function_40acb0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40acb0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_406610' )
        fnc = self.out_c.funcs[ 'function_40ad2b' ]
        assert fnc.calls( 'function_409850' )
        fnc = self.out_c.funcs[ 'function_40ad40' ]
        assert fnc.calls( 'function_409850' )
        assert fnc.calls( 'function_40af20' )
        fnc = self.out_c.funcs[ 'function_40ada0' ]
        assert fnc.calls( 'function_4099a0' )
        assert fnc.calls( 'GetDlgItem' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetTimer' )
        assert fnc.calls( 'SetWindowLongW' )
        fnc = self.out_c.funcs[ 'function_40af20' ]
        assert fnc.calls( 'function_407270' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'InvalidateRect' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetWindowLongW' )
        fnc = self.out_c.funcs[ 'function_40b020' ]
        fnc = self.out_c.funcs[ 'function_40b0a0' ]
        assert fnc.calls( 'function_40abf0' )
        fnc = self.out_c.funcs[ 'function_40b150' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_40b1c0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40b1c0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_406610' )
        fnc = self.out_c.funcs[ 'function_40b250' ]
        assert fnc.calls( 'CreateDialogParamW' )
        assert fnc.calls( 'function_406720' )
        fnc = self.out_c.funcs[ 'function_40b2b4' ]
        assert fnc.calls( 'function_40ad40' )
        fnc = self.out_c.funcs[ 'function_40b2d0' ]
        assert fnc.calls( 'function_40b3e0' )
        assert fnc.calls( 'function_40b420' )
        assert fnc.calls( 'LoadIconW' )
        assert fnc.calls( 'MessageBoxW' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetWindowTextW' )
        fnc = self.out_c.funcs[ 'function_40b3e0' ]
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_40b420' ]
        assert fnc.calls( 'function_40b670' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'InSendMessage' )
        assert fnc.calls( 'MessageBoxIndirectW' )
        assert fnc.calls( 'PostQuitMessage' )
        fnc = self.out_c.funcs[ 'function_40b5a0' ]
        assert fnc.calls( 'CreateWindowExW' )
        assert fnc.calls( 'RegisterClassExW' )
        fnc = self.out_c.funcs[ 'function_40b670' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_407300' )
        assert fnc.calls( 'function_40b0a0' )
        assert fnc.calls( 'function_40ba10' )
        assert fnc.calls( 'function_40ba90' )
        assert fnc.calls( 'function_40bb20' )
        #assert fnc.calls( 'function_40bff0' )
        assert fnc.calls( 'function_40cc90' )
        assert fnc.calls( 'function_40d880' )
        assert fnc.calls( 'function_40e560' )
        assert fnc.calls( 'GetClientRect' )
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'IsWindowVisible' )
        assert fnc.calls( 'LeaveCriticalSection' )
        # Do not check the following call because it is not detected on Windows
        # due to a syntax error.
        # assert fnc.calls( 'MonitorFromPoint' )
        assert fnc.calls( 'ReplyMessage' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'ShowWindow' )
        assert fnc.calls( 'UpdateWindow' )
        fnc = self.out_c.funcs[ 'function_40ba10' ]
        assert fnc.calls( 'FlashWindowEx' )
        assert fnc.calls( 'GetForegroundWindow' )
        assert fnc.calls( 'GetParent' )
        assert fnc.calls( 'SetForegroundWindow' )
        fnc = self.out_c.funcs[ 'function_40ba90' ]
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'MessageBoxIndirectW' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_40bb20' ]
        assert fnc.calls( 'FindResourceExW' )
        assert fnc.calls( 'GdipAlloc' )
        assert fnc.calls( 'GdipCreateBitmapFromStream' )
        assert fnc.calls( 'LoadResource' )
        assert fnc.calls( 'LockResource' )
        assert fnc.calls( 'SHCreateMemStream' )
        assert fnc.calls( 'SizeofResource' )
        fnc = self.out_c.funcs[ 'function_40bbf0' ]
        assert fnc.calls( 'CoUninitialize' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40bc40' ]
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'SetWindowLongW' )
        fnc = self.out_c.funcs[ 'function_40bcc0' ]
        assert fnc.calls( 'function_40bcf0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40bcf0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'EndDialog' )
        fnc = self.out_c.funcs[ 'function_40bd60' ]
        assert fnc.calls( 'DefWindowProcW' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'SetWindowLongW' )
        fnc = self.out_c.funcs[ 'function_40bde0' ]
        fnc = self.out_c.funcs[ 'function_40bdf0' ]
        assert fnc.calls( 'AdjustWindowRectEx' )
        assert fnc.calls( 'GetClientRect' )
        assert fnc.calls( 'GetSystemMetrics' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'GetWindowRect' )
        assert fnc.calls( 'SetWindowPos' )
        fnc = self.out_c.funcs[ 'function_40bff0' ]
        assert fnc.calls( 'function_40bdf0' )
        assert fnc.calls( 'GetMonitorInfoW' )
        assert fnc.calls( 'MonitorFromWindow' )
        fnc = self.out_c.funcs[ 'function_40c070' ]
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'function_40c2c0' )
        fnc = self.out_c.funcs[ 'function_40c110' ]
        assert fnc.calls( '_vsnprintf' )
        fnc = self.out_c.funcs[ 'function_40c1b0' ]
        fnc = self.out_c.funcs[ 'function_40c250' ]
        fnc = self.out_c.funcs[ 'function_40c2c0' ]
        fnc = self.out_c.funcs[ 'function_40c310' ]
        fnc = self.out_c.funcs[ 'function_40c370' ]
        fnc = self.out_c.funcs[ 'function_40c3e0' ]
        assert fnc.calls( 'function_40c250' )
        fnc = self.out_c.funcs[ 'function_40c410' ]
        assert fnc.calls( 'function_40c1b0' )
        fnc = self.out_c.funcs[ 'function_40c430' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_40c1b0' )
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_40c5a0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_40c110' )
        assert fnc.calls( 'function_40c250' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_40c700' ]
        assert fnc.calls( 'function_40c430' )
        fnc = self.out_c.funcs[ 'function_40c720' ]
        assert fnc.calls( 'function_40c5a0' )
        fnc = self.out_c.funcs[ 'function_40c740' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'LeaveCriticalSection' )
        #fnc = self.out_c.funcs[ 'function_40c790' ]
        fnc = self.out_c.funcs[ 'function_40c7a0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_40c800' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        fnc = self.out_c.funcs[ 'function_40c860' ]
        assert fnc.calls( 'function_40c740' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        fnc = self.out_c.funcs[ 'function_40c8d0' ]
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40c8f0' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_40c970' ]
        assert fnc.calls( 'function_40c740' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_40ca00' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_40c860' )
        assert fnc.calls( 'function_40cb80' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'HeapReAlloc' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'memcpy' )
        assert fnc.calls( 'memmove' )
        fnc = self.out_c.funcs[ 'function_40cb80' ]
        fnc = self.out_c.funcs[ 'function_40cc20' ]
        assert fnc.calls( 'function_4099a0' )
        assert fnc.calls( 'function_40a760' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_40cc70' ]
        assert fnc.calls( 'function_40b670' )
        fnc = self.out_c.funcs[ 'function_40cc90' ]
        assert fnc.calls( 'function_40abf0' )
        fnc = self.out_c.funcs[ 'function_40cd30' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_40cda0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40cda0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_406610' )
        fnc = self.out_c.funcs[ 'function_40ce20' ]
        assert fnc.calls( 'CreateDialogParamW' )
        assert fnc.calls( 'function_406720' )
        fnc = self.out_c.funcs[ 'function_40ce84' ]
        assert fnc.calls( 'function_40cd30' )
        fnc = self.out_c.funcs[ 'function_40cea0' ]
        assert fnc.calls( 'function_409850' )
        assert fnc.calls( 'function_40d430' )
        fnc = self.out_c.funcs[ 'function_40cf10' ]
        assert fnc.calls( 'function_4099a0' )
        assert fnc.calls( 'function_40d6a0' )
        assert fnc.calls( 'GetDlgItem' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetFocus' )
        fnc = self.out_c.funcs[ 'function_40cfd0' ]
        assert fnc.calls( 'function_408bc0' )
        assert fnc.calls( 'function_40b670' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'function_40c410' )
        assert fnc.calls( 'function_410370' )
        assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'GetCurrentThreadId' )
        assert fnc.calls( 'GetWindowTextW' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'MessageBoxIndirectW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetEvent' )
        assert fnc.calls( 'SetFocus' )
        assert fnc.calls( 'SetWindowTextW' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40d410' ]
        assert fnc.calls( 'function_40b670' )
        fnc = self.out_c.funcs[ 'function_40d430' ]
        assert fnc.calls( 'function_407270' )
        assert fnc.calls( 'function_40a760' )
        assert fnc.calls( 'function_40d7b0' )
        assert fnc.calls( 'InvalidateRect' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetWindowTextW' )
        assert fnc.calls( 'ShowWindow' )
        assert fnc.calls( 'UpdateWindow' )
        fnc = self.out_c.funcs[ 'function_40d560' ]
        # Do not check the following call because it is not detected on Windows
        # due to a syntax error.
        # assert fnc.calls( 'AlphaBlend' )
        assert fnc.calls( 'CreateCompatibleDC' )
        assert fnc.calls( 'DeleteDC' )
        assert fnc.calls( 'function_40a5f0' )
        assert fnc.calls( 'SelectObject' )
        fnc = self.out_c.funcs[ 'function_40d6a0' ]
        assert fnc.calls( 'function_40bb20' )
        assert fnc.calls( 'GdipCreateHBITMAPFromBitmap' )
        assert fnc.calls( 'GdipGetImageHeight' )
        assert fnc.calls( 'GdipGetImageWidth' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_40d7b0' ]
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'ShowWindow' )
        fnc = self.out_c.funcs[ 'function_40d880' ]
        assert fnc.calls( 'function_40abf0' )
        assert fnc.calls( 'memset' )
        fnc = self.out_c.funcs[ 'function_40d980' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_40d9f0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40d9f0' ]
        assert fnc.calls( 'DeleteObject' )
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_406610' )
        fnc = self.out_c.funcs[ 'function_40db20' ]
        assert fnc.calls( 'CreateDialogParamW' )
        assert fnc.calls( 'function_406720' )
        fnc = self.out_c.funcs[ 'function_40db84' ]
        assert fnc.calls( 'function_40cea0' )
        fnc = self.out_c.funcs[ 'function_40dba0' ]
        assert fnc.calls( 'EndDialog' )
        assert fnc.calls( 'function_40dd10' )
        assert fnc.calls( 'function_40def0' )
        assert fnc.calls( 'function_40df60' )
        fnc = self.out_c.funcs[ 'function_40dd10' ]
        assert fnc.calls( 'function_40e0a0' )
        assert fnc.calls( 'GetDlgItem' )
        assert fnc.calls( 'GetWindowLongW' )
        assert fnc.calls( 'LoadIconW' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetFocus' )
        assert fnc.calls( 'SetWindowLongW' )
        assert fnc.calls( 'SetWindowTextW' )
        assert fnc.calls( 'SetWindowTheme' )
        fnc = self.out_c.funcs[ 'function_40def0' ]
        assert fnc.calls( 'GetClientRect' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SetWindowPos' )
        fnc = self.out_c.funcs[ 'function_40df60' ]
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'SendMessageW' )
        assert fnc.calls( 'SHGetFileInfoW' )
        fnc = self.out_c.funcs[ 'function_40e000' ]
        assert fnc.calls( 'function_401910' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'PathRemoveFileSpecW' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_40e0a0' ]
        assert fnc.calls( 'function_408ae0' )
        assert fnc.calls( 'function_410670' )
        assert fnc.calls( 'function_410770' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'PathFindFileNameW' )
        assert fnc.calls( 'PathRemoveFileSpecW' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SendMessageW' )
        fnc = self.out_c.funcs[ 'function_40e220' ]
        fnc = self.out_c.funcs[ 'function_40e290' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_40e2f0' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40e2f0' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'EndDialog' )
        fnc = self.out_c.funcs[ 'function_40e357' ]
        assert fnc.calls( 'function_40dba0' )
        fnc = self.out_c.funcs[ 'function_40e370' ]
        assert fnc.calls( 'function_409850' )
        assert fnc.calls( 'function_40e450' )
        fnc = self.out_c.funcs[ 'function_40e3d0' ]
        assert fnc.calls( 'function_4099a0' )
        assert fnc.calls( 'SetTimer' )
        fnc = self.out_c.funcs[ 'function_40e450' ]
        assert fnc.calls( 'function_407270' )
        assert fnc.calls( 'InvalidateRect' )
        assert fnc.calls( 'UpdateWindow' )
        fnc = self.out_c.funcs[ 'function_40e4a0' ]
        fnc = self.out_c.funcs[ 'function_40e560' ]
        assert fnc.calls( 'function_40abf0' )
        fnc = self.out_c.funcs[ 'function_40e5e0' ]
        assert fnc.calls( 'function_40e620' )
        assert fnc.calls( 'HeapFree' )
        fnc = self.out_c.funcs[ 'function_40e620' ]
        assert fnc.calls( 'DestroyWindow' )
        assert fnc.calls( 'function_406610' )
        fnc = self.out_c.funcs[ 'function_40e6a0' ]
        assert fnc.calls( 'CreateDialogParamW' )
        assert fnc.calls( 'function_406720' )
        fnc = self.out_c.funcs[ 'function_40e701' ]
        assert fnc.calls( 'function_40e370' )
        fnc = self.out_c.funcs[ 'function_40e720' ]
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'DeleteFileW' )
        assert fnc.calls( 'function_4050c0' )
        assert fnc.calls( 'function_4087f0' )
        assert fnc.calls( 'function_408fc0' )
        assert fnc.calls( 'function_40c700' )
        assert fnc.calls( 'GetEnvironmentVariableW' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'PathUnquoteSpacesW' )
        assert fnc.calls( 'SetFileAttributesW' )
        assert fnc.calls( 'WriteFile' )
        fnc = self.out_c.funcs[ 'function_40e900' ]
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'PathRemoveFileSpecW' )
        assert fnc.calls( 'StrCmpIW' )
        fnc = self.out_c.funcs[ 'function_40e990' ]
        assert fnc.calls( 'function_40c070' )
        assert fnc.calls( 'StringFromGUID2' )
        assert fnc.calls( 'function_405a70' )
        assert fnc.calls( 'SetFileAttributesW' )
        assert fnc.calls( 'CopyFileExW' )
        assert fnc.calls( 'function_40c700' )
        assert fnc.calls( 'function_408e10' )
        assert fnc.calls( 'CreateProcessW' )
        assert fnc.calls( 'CloseHandle' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'DeleteFileW' )
        assert fnc.calls( 'memset' )
        fnc = self.out_c.funcs[ 'function_40ebc0' ]
        assert fnc.calls( 'function_4093a0' )
        assert fnc.calls( 'function_40e720' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegDeleteValueW' )
        assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40ec60' ]
        assert fnc.calls( 'GetModuleHandleW' )
        assert fnc.calls( 'GetProcAddress' )
        assert fnc.calls( 'GetUserDefaultUILanguage' )
        fnc = self.out_c.funcs[ 'function_40edd0' ]
        fnc = self.out_c.funcs[ 'function_40ee80' ]
        fnc = self.out_c.funcs[ 'function_40ef30' ]
        fnc = self.out_c.funcs[ 'function_40ef40' ]
        fnc = self.out_c.funcs[ 'function_40ef50' ]
        fnc = self.out_c.funcs[ 'function_40ef80' ]
        assert fnc.calls( 'function_40fdd0' )
        assert fnc.calls( 'GetSystemTime' )
        fnc = self.out_c.funcs[ 'function_40efd0' ]
        #assert fnc.calls( 'function_410a10' )
        assert fnc.calls( 'function_40c250' )
        assert fnc.calls( 'GetSystemTime' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'MultiByteToWideChar' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'RegQueryValueExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SystemTimeToFileTime' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40f1a0' ]
        assert fnc.calls( 'function_40c2c0' )
        assert fnc.calls( 'function_410370' )
        assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        assert fnc.calls( 'WideCharToMultiByte' )
        fnc = self.out_c.funcs[ 'function_40f270' ]
        fnc = self.out_c.funcs[ 'function_40f280' ]
        assert fnc.calls( 'CryptDestroyKey' )
        assert fnc.calls( 'CryptImportKey' )
        assert fnc.calls( 'function_404620' )
        fnc = self.out_c.funcs[ 'function_40f2e0' ]
        assert fnc.calls( 'function_4018a0' )
        assert fnc.calls( 'function_40f3d0' )
        assert fnc.calls( 'function_40f660' )
        assert fnc.calls( 'function_40f6b0' )
        assert fnc.calls( 'function_40f790' )
        assert fnc.calls( 'lstrcmpA' )
        fnc = self.out_c.funcs[ 'function_40f3d0' ]
        assert fnc.calls( 'function_404ba0' )
        assert fnc.calls( 'function_40c250' )
        fnc = self.out_c.funcs[ 'function_40f660' ]
        assert fnc.calls( 'function_40fb70' )
        fnc = self.out_c.funcs[ 'function_40f6b0' ]
        assert fnc.calls( 'function_40c250' )
        assert fnc.calls( 'function_40c310' )
        assert fnc.calls( 'function_410370' )
        assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SetEvent' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40f790' ]
        assert fnc.calls( 'function_404690' )
        #assert fnc.calls( 'function_4046c0' )
        assert fnc.calls( 'function_404c90' )
        assert fnc.calls( 'function_40b670' )
        assert fnc.calls( 'function_40fb70' )
        assert fnc.calls( 'function_40fc10' )
        assert fnc.calls( 'function_40fd60' )
        assert fnc.calls( 'LocalFree' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegCreateKeyExW' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegSetValueExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SetEvent' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40fa20' ]
        assert fnc.calls( 'function_404e50' )
        assert fnc.calls( 'function_409140' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40fb70' ]
        assert fnc.calls( 'function_40fd60' )
        assert fnc.calls( 'function_410370' )
        #assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40fc10' ]
        assert fnc.calls( 'function_410370' )
        assert fnc.calls( 'function_4104f0' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_40fc80' ]
        assert fnc.calls( 'InitializeCriticalSection' )
        fnc = self.out_c.funcs[ 'function_40fce0' ]
        assert fnc.calls( 'function_407c00' )
        assert fnc.calls( 'function_40fa20' )
        fnc = self.out_c.funcs[ 'function_40fd60' ]
        fnc = self.out_c.funcs[ 'function_40fdd0' ]
        fnc = self.out_c.funcs[ 'function_40ff70' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'function_407c00' )
        assert fnc.calls( 'function_40fa20' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_410260' ]
        assert fnc.calls( 'WaitForMultipleObjects' )
        fnc = self.out_c.funcs[ 'function_4102a0' ]
        assert fnc.calls( 'CreateMutexW' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'StringFromGUID2' )
        fnc = self.out_c.funcs[ 'function_410350' ]
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_410370' ]
        #assert fnc.calls( 'function_410a10' )
        assert fnc.calls( 'GetSystemTime' )
        assert fnc.calls( 'memset' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'RegQueryValueExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'SystemTimeToFileTime' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_4104f0' ]
        assert fnc.calls( '__asm_rep_movsd_memcpy' )
        assert fnc.calls( 'RegCloseKey' )
        #assert fnc.calls( 'RegCreateKeyExW' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegSetValueExW' )
        fnc = self.out_c.funcs[ 'function_4105c0' ]
        assert fnc.calls( 'function_4090c0' )
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'GetTickCount' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_410670' ]
        assert fnc.calls( 'EnterCriticalSection' )
        assert fnc.calls( 'GetProcessHeap' )
        assert fnc.calls( 'HeapAlloc' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'LeaveCriticalSection' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_410770' ]
        assert fnc.calls( 'RegEnumValueW' )
        fnc = self.out_c.funcs[ 'function_410830' ]
        assert fnc.calls( 'function_40c370' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegDeleteValueW' )
        assert fnc.calls( 'RegFlushKey' )
        #assert fnc.calls( 'RegOpenKeyExW' )
        assert fnc.calls( 'ReleaseMutex' )
        assert fnc.calls( 'WaitForSingleObject' )
        fnc = self.out_c.funcs[ 'function_410930' ]
        assert fnc.calls( 'function_410670' )
        assert fnc.calls( 'function_410770' )
        assert fnc.calls( 'HeapFree' )
        assert fnc.calls( 'RegCloseKey' )
        assert fnc.calls( 'RegFlushKey' )
        assert fnc.calls( 'ReleaseMutex' )
        fnc = self.out_c.funcs[ 'function_4109c6' ]
        assert fnc.calls( '_purecall' )
        fnc = self.out_c.funcs[ 'function_410a78' ]
        assert fnc.calls( '_except_handler3' )
        fnc = self.out_c.funcs[ 'function_410a7e' ]
        assert fnc.calls( 'memcpy' )
        fnc = self.out_c.funcs[ 'function_410a84' ]
        assert fnc.calls( 'memset' )

    #def test_check_for_signedMod1_idiom_detection(self):
        #assert self.out_c.contains(r'\S+ % 1000; // 0x40fdf1')
